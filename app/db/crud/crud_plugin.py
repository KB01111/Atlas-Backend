"""CRUD operations for Plugin Configurations.

Handles database interactions for storing, retrieving, updating, and deleting
plugin configurations, ensuring user ownership and RLS.
"""

import logging
from typing import Optional

from postgrest import APIError  # type: ignore

# Assuming supabase_py_async client is used, adjust imports if using Prisma
from supabase_py_async import AsyncClient

from app.models.plugin import (
    PluginConfigurationCreate,
    PluginConfigurationOut,
    PluginConfigurationUpdate,
)

logger = logging.getLogger(__name__)

TABLE_NAME = "plugin_configurations"


async def create_plugin_configuration(
    db: AsyncClient,
    *,  # Enforce keyword arguments
    user_id: str,
    plugin_config_in: PluginConfigurationCreate,
) -> PluginConfigurationOut:
    """Create a new plugin configuration record for a user."""
    insert_data = plugin_config_in.model_dump()
    insert_data["user_id"] = user_id
    # Assuming 'id' is generated by default or using uuid4 if needed
    # insert_data["id"] = str(uuid4())

    try:
        result = (
            await db.table(TABLE_NAME)
            .insert(insert_data)
            .execute()
        )
        if not result.data:
            logger.error(
                f"Failed to create plugin config for user {user_id}. "
                "No data returned."
            )
            raise ValueError("Plugin configuration creation failed.")

        created_config_dict = result.data[0]
        logger.info(
            f"Created plugin config {created_config_dict['id']} for user "
            f"{user_id}"
        )
        # Use from_attributes=True defined in PluginConfigurationOut
        return PluginConfigurationOut.model_validate(created_config_dict)
    except APIError as e:
        logger.error(
            f"Supabase API Error creating plugin config for user {user_id}: {e}"
        )
        raise
    except Exception as e:
        logger.error(
            f"Unexpected error creating plugin config for user {user_id}: {e}"
        )
        raise ValueError(f"Plugin configuration creation failed: {e}") from e


async def get_plugin_configuration(
    db: AsyncClient, *, user_id: str, plugin_config_id: str
) -> Optional[PluginConfigurationOut]:
    """Retrieve a specific plugin configuration by ID for a user."""
    try:
        result = (
            await db.table(TABLE_NAME)
            .select("*")
            .eq("id", plugin_config_id)
            .eq("user_id", user_id)  # Ensure user ownership (RLS)
            .maybe_single()
            .execute()
        )
        if not result.data:
            logger.warning(
                f"Plugin config {plugin_config_id} not found for user {user_id}"
            )
            return None

        logger.debug(f"Retrieved plugin config {plugin_config_id} for user {user_id}")
        return PluginConfigurationOut.model_validate(result.data)
    except APIError as e:
        logger.error(
            f"Supabase API Error retrieving plugin config {plugin_config_id} "
            f"for user {user_id}: {e}"
        )
        raise
    except Exception as e:
        logger.error(
            f"Unexpected error retrieving plugin config {plugin_config_id} "
            f"for user {user_id}: {e}"
        )
        raise


async def get_plugin_configurations_by_user(
    db: AsyncClient, *, user_id: str
) -> list[PluginConfigurationOut]:
    """Retrieve all plugin configurations for a specific user."""
    try:
        result = (
            await db.table(TABLE_NAME)
            .select("*")
            .eq("user_id", user_id)
            .execute()
        )
        logger.debug(f"Retrieved {len(result.data)} plugin configs for user {user_id}")
        return [
            PluginConfigurationOut.model_validate(item) for item in result.data
        ]
    except APIError as e:
        logger.error(
            f"Supabase API Error retrieving plugin configs for user {user_id}: {e}"
        )
        raise
    except Exception as e:
        logger.error(
            f"Unexpected error retrieving plugin configs for user {user_id}: {e}"
        )
        raise


async def update_plugin_configuration(
    db: AsyncClient,
    *,
    user_id: str,
    plugin_config_id: str,
    plugin_config_in: PluginConfigurationUpdate,
) -> Optional[PluginConfigurationOut]:
    """Update an existing plugin configuration for a user."""
    update_data = plugin_config_in.model_dump(exclude_unset=True)

    if not update_data:
        logger.warning("Plugin configuration update called with no data.")
        # Optionally return the existing object if no changes needed
        return await get_plugin_configuration(
            db, user_id=user_id, plugin_config_id=plugin_config_id
        )

    try:
        result = (
            await db.table(TABLE_NAME)
            .update(update_data)
            .eq("id", plugin_config_id)
            .eq("user_id", user_id)  # Ensure user ownership (RLS)
            .execute()
        )
        if not result.data:
            logger.warning(
                f"Plugin config {plugin_config_id} not found for update "
                f"by user {user_id}"
            )
            return None

        updated_config_dict = result.data[0]
        logger.info(
            f"Updated plugin config {plugin_config_id} for user {user_id}"
        )
        return PluginConfigurationOut.model_validate(updated_config_dict)
    except APIError as e:
        logger.error(
            f"Supabase API Error updating plugin config {plugin_config_id} "
            f"for user {user_id}: {e}"
        )
        raise
    except Exception as e:
        logger.error(
            f"Unexpected error updating plugin config {plugin_config_id} "
            f"for user {user_id}: {e}"
        )
        raise


async def delete_plugin_configuration(
    db: AsyncClient, *, user_id: str, plugin_config_id: str
) -> bool:
    """Delete a plugin configuration for a user. Returns True if deleted, False otherwise."""
    try:
        result = (
            await db.table(TABLE_NAME)
            .delete()
            .eq("id", plugin_config_id)
            .eq("user_id", user_id)  # Ensure user ownership (RLS)
            .execute()
        )
        # Check if any row was actually deleted
        deleted = bool(result.data)
        if deleted:
            logger.info(
                f"Deleted plugin config {plugin_config_id} for user {user_id}"
            )
        else:
            logger.warning(
                f"Plugin config {plugin_config_id} "
                f"not found for deletion by user "
                f"{user_id}"
            )
        return deleted
    except APIError as e:
        logger.error(
            f"Supabase API Error deleting plugin config {plugin_config_id} "
            f"for user {user_id}: {e}"
        )
        raise
    except Exception as e:
        logger.error(
            f"Unexpected error deleting plugin config {plugin_config_id} "
            f"for user {user_id}: {e}"
        )
        raise
